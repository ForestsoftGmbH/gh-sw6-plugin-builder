name: Build Shopware Plugin
description: This pipeline builds a Shopware plugin and pushes it to the GitHub registry.

inputs:
  
  IMAGE_NAME:
    description: 'The name of the image'
    required: false
  
  COMPOSER_AUTH_JSON:
    description: 'composer auth json as base64'
    required: false

  GITHUB_TOKEN:
    description: 'The git token'
    required: false
  GITHUB_USER:
    description: 'The github user'
    required: false
  DOCKER_REGISTRY:
    description: 'The docker registry'
    required: false
    default: 'ghcr.io'
  DOCKER_USER:
    description: 'The docker registry username'
    required: false
  DOCKER_PASSWORD:
    description: 'The docker registry password'
    required: false
  DOCKER_SECOND_REGISTRY:
    description: 'The docker registry'
    required: false
    default: 'ghcr.io'
  DOCKER_SECOND_USER:
    description: 'The docker registry username'
    required: false
  DOCKER_SECOND_PASSWORD:
    description: 'The docker registry password'
    required: false
  
  plugin_name:
    description: 'The name of the plugin'
    required: true

runs:
  using: "composite"
  steps:
    - id: detect_version
      shell: bash
      run: |
        if [ "${{github.event.pull_request.head.ref}}" != "" ]; then
          echo "COMMIT=${{github.event.pull_request.head.ref}}" >> $GITHUB_OUTPUT
        else 
          COMMIT=${{github.ref_name}}
        fi
        echo "docker_tag=latest" >> $GITHUB_OUTPUT
    - uses: actions/checkout@v3
      with:
        ref: ${{steps.detect_version.outputs.COMMIT}}
        fetch-depth: 0
    
    - id: docker_login
      if: inputs.DOCKER_USER != '' && inputs.DOCKER_PASSWORD != ''
      shell: bash
      run: |
        echo "${{inputs.DOCKER_PASSWORD}}" | docker login -u ${{inputs.DOCKER_USER}} ${{inputs.DOCKER_REGISTRY}} --password-stdin
    - id: docker_second_login
      if: inputs.DOCKER_SECOND_USER != '' && inputs.DOCKER_SECOND_PASSWORD != ''
      shell: bash
      run: |
          echo "${{inputs.DOCKER_SECOND_PASSWORD}}" | docker login -u ${{inputs.DOCKER_SECOND_USER}} ${{inputs.DOCKER_SECOND_REGISTRY}} --password-stdin
    
    - name: Login into Github Docker Registery
      if: inputs.GITHUB_TOKEN != ''
      shell: bash
      run: echo "${{ inputs.GITHUB_TOKEN  }}" | docker login ghcr.io -u ${{ inputs.GITHUB_USER }} --password-stdin
            
    - id: preflight
      if: inputs.IMAGE_NAME != ''
      shell: bash
      run: |
        if [ -f "Dockerfile" ]; then
          echo "BUILD_DOCKER=${{inputs.IMAGE_NAME}}" >> $GITHUB_OUTPUT
        fi
    
    - uses: ForestsoftGmbH/gh-build-action@main
      if: steps.preflight.outputs.BUILD_DOCKER != ''
      with:
        DOCKER_IMAGE: ${{steps.preflight.outputs.BUILD_DOCKER}}
        DOCKER_TAG: ${{steps.detect_version.outputs.docker_tag}}
        COMPOSER_AUTH_JSON: ${{ inputs.COMPOSER_AUTH_JSON }}
        File: ./Dockerfile
        context: .
        Username: ${{ inputs.GITHUB_USER }}
        Password: ${{ inputs.GITHUB_TOKEN }}
    
    - uses: isbang/compose-action@v1.5.1
      with:
        compose-file: "docker-compose.yml"
        down-flags: "--volumes"
 
    - id: container_start
      shell: bash
      run: |
        attempt=0
        while [ $attempt -le 59 ]; do
          CUR_STATUS=$(curl -k -s -o /dev/null -w ''%{http_code}'' https://localhost)
          if [[ "$CUR_STATUS" != "200" ]]; then
            break
          fi
          attempt=$(( $attempt + 1 ))
          echo "Waiting for server to be realy (Current: $CUR_STATUS) (attempt: $attempt)..."
          sleep 2
        done
        echo "Server is ready!"
    - id: setup_tests
      shell: bash
      run: |
          docker-compose exec -T app xdebug.sh enable   
          
    
    - id: run_tests
      shell: bash
      run: |
        docker-compose exec app /var/www/html/vendor/bin/phpunit -c /var/www/html/custom/plugins/${{inputs.plugin_name}}/tests/phpunit.xml --testdox --order-by=random --colors=always
    
    - name: Get next version
      id: get_next_version
      uses: docker://ghcr.io/thenativeweb/get-next-version:2.5.0
      with:
        entrypoint: /action/entrypoint.sh
    
    - name: Show the next version
      shell: bash
      id: version
      run: |
        echo ${{ steps.get_next_version.outputs.version }}
        echo ${{ steps.get_next_version.outputs.hasNextVersion }}
        echo "version=${{ steps.get_next_version.outputs.version }}" >> $GITHUB_OUTPUT
        echo "hasNextVersion=${{ steps.get_next_version.outputs.hasNextVersion }}" >> $GITHUB_OUTPUT
    - name: Tag version
      if: inputs.tag_version == 'true' && steps.get_next_version.outputs.hasNextVersion == 'true'
      shell: bash
      run: |
        git config --global user.email ""    
        git config --global user.name "GitHub Action"
        git tag ${{ steps.get_next_version.outputs.version }}
        git push https://${GITHUB_ACTOR}:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git --follow-tags
        git push https://${GITHUB_ACTOR}:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git --tags
        

       